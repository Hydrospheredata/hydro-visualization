name: Release
on:
  push:
    branches:
      - master
      - main
      
  workflow_dispatch:
    inputs:
      bump:
        description: bump rule (major|minor|patch|premajor|preminor|prepatch|prerelease)
        default: patch
        required: false

      version:
        description: release version, ommit for patch
        default: ''
        required: false

      sdk_version:
        description: sdk version, ommit for patch
        default: ''
        required: false

      release:
        description: release type (local|global)
        default: local
        required: false

# Secrets:
#   DOCKERHUB_USERNAME - also used as the dockerhub repository url
#   DOCKERHUB_PASSWORD
#   HYDRO_SERVING_TOKEN - github token with write access to hydro-serving repo

env:
  HYDRO_SERVING_REPO: ${{ github.repository_owner }}/hydro-serving
  IMAGE: hydro-visualization # name of the built image  
  REGISTRY: hydrosphere
  VERSION: ${{ github.event.inputs.version }}
  SDK_VERSION: ${{ github.event.inputs.sdk_version }}

jobs:
  Verify_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get latest tag
        id: get-latest-tag
        uses: actions-ecosystem/action-get-latest-tag@v1

    outputs:
      latest_version: ${{ steps.get-latest-tag.outputs.tag }}

  Build_and_publish:
    needs: Verify_version
    if: >
      needs.Verify_version.outputs.latest_version != '$VERSION' && (
      github.event_name == 'workflow_dispatch' || 
      github.event_name == 'push')

    runs-on: ubuntu-latest
    steps:
    # Install prerequisites
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Setup Python
      uses: actions/setup-python@v2.2.2
      with:
        python-version: 3.8
        
    - name: Setup poetry
      uses: abatilo/actions-poetry@v2.1.0

      # Update dependency
    - name: Bump sdk
      if: |
        env.SDK_VERSION == '' && github.event.inputs.release == 'local' ||
        github.event_name == 'push'
      run: |
        SDK_VERSION=$(curl -Ls https://pypi.org/pypi/hydrosdk/json | jq -r '.releases | keys[]' | sort -V | tail -n 1)
        echo $SDK_VERSION
       # if SDK_VERSION > localsdk = build break?
      # poetry add hydrosdk=$SDK_VERSION
          
    - name: Bump sdk to latest stable version
      if: env.SDK_VERSION == '' && github.event.inputs.release == 'global'
      run: |
        SDK_VERSION=$(curl -Ls https://pypi.org/pypi/hydrosdk/json | jq -r .info.version)
        echo $SDK_VERSION
        poetry add hydrosdk=$SDK_VERSION
          
    - name: Set manual sdk version
      if: env.SDK_VERSION != ''
      run: poetry add hydrosdk=${{ env.SDK_VERSION }}
          
    - name: Install dependencies
      run: poetry install

      # Bump service version
    - name: bump version
      if: env.VERSION == '' && github.event_name == 'workflow_dispatch'
      run: poetry version ${{ github.event.inputs.bump }}
      
    - name: force bump version
      if: env.VERSION != '' && github.event_name == 'workflow_dispatch'
      run: poetry version ${{ env.VERSION }}

      # Set variables
    - name: Set VERSION variable
      if: github.event_name == 'workflow_dispatch'
      run: echo VERSION=$(poetry version -s) >> $GITHUB_ENV

    - name: Set VERSION variable
      if: github.event_name != 'workflow_dispatch'
      run: echo VERSION=${{ github.sha }} >> $GITHUB_ENV

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildxrel-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

      # Build and push image
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        builder: ${{ steps.buildx.outputs.name }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.VERSION }}
          ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest
        cache-from: type=local,src=/tmp/.buildxrel-cache
        cache-to: type=local,dest=/tmp/.buildxrel-cache-new
        build-args: |
            GIT_HEAD_COMMIT=${{ github.sha }}
            GIT_CURRENT_BRANCH=${{ github.ref }}

    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    - name: Move cache
      run: |
        rm -rf /tmp/.buildxrel-cache
        mv /tmp/.buildxrel-cache-new /tmp/.buildxrel-cache
        
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

      # Update helm and docker-compose  
    - name: Update image version in hydro-serving repo
      if: github.event_name == 'push'
      uses: aurelien-baudet/workflow-dispatch@v2.1.1
      with:
        workflow: Local release
        token: ${{ secrets.HYDRO_SERVING_TOKEN }}
        repo: ${{ env.HYDRO_SERVING_REPO }}
        inputs: '{"service_image_name":"${{ env.IMAGE }}", "registry_url":"${{ env.REGISTRY }}", "tag":"${{ env.VERSION }}"}'

      # Commit changes
    - name: Commit new version
      if: github.event_name == 'workflow_dispatch'
      run: "echo ${{ env.VERSION }} > version"

    - name: Push to repo
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git commit -m "Releasing ${{ env.IMAGE }}:${{ env.VERSION }}" -a --allow-empty
        git push
        
    - name: Reports
      id: generate-output
      run: echo "::set-output name=tag-output::${{ env.VERSION }}"

    - name: Create github release
      if: github.event_name == 'workflow_dispatch'
      uses: meeDamian/github-release@2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.VERSION }}

    outputs:
      tag: ${{ steps.generate-output.outputs.tag-output }}
